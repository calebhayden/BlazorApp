@page "/retro"
@using BlazorApp.Data
@inject RetroBoardService RetroBoardService


<div class="header">
    <h1>Caleb's Crazy Cool Retro Board for Winners</h1>
    <h4>Good Items: @goodRetros.Items.Count() | Bad Items: @badRetros.Items.Count() | Action Items: @actionItems.Items.Count() </h4>
</div>

<div class="grid-container">
    <RetroColumn inputRetros="goodRetros" onAddClicked="AddGoodRetro" onDeleteClicked="RemoveRetro"></RetroColumn>
    <RetroColumn inputRetros="badRetros" onAddClicked="AddBadRetro" onDeleteClicked="RemoveRetro"></RetroColumn>
    <RetroColumn inputRetros="actionItems" onAddClicked="AddActionItem" onDeleteClicked="RemoveRetro"></RetroColumn>
</div>

@code {

    private RetroItemCollection goodRetros = new() { Header = "What went Well", HelperText = "What went well?" };
    private RetroItemCollection badRetros = new() { Header = "What didn't go Well", HelperText = "What didn't go well?" };
    private RetroItemCollection actionItems = new() { Header = "Action Items", HelperText = "Add an action Item" };

    protected override async Task OnInitializedAsync()
    {
        goodRetros.Items = await RetroBoardService.GetRetroBoardAsync();
        badRetros.Items = await RetroBoardService.GetRetroBoardAsync();
        actionItems.Items = await RetroBoardService.GetRetroBoardAsync();
    }

    private void AddGoodRetro(string newGoodEntry)
    {
        if (!string.IsNullOrWhiteSpace(newGoodEntry))
        {
            goodRetros.Items.Add(new RetroItem { Text = newGoodEntry, Id = goodRetros.Items.Count() + 1, Author = "Anonymous" });
            newGoodEntry = string.Empty;
        }
    }

    private void AddBadRetro(string newBadEntry)
    {
        if (!string.IsNullOrWhiteSpace(newBadEntry))
        {
            badRetros.Items.Add(new RetroItem { Text = newBadEntry });
            newBadEntry = string.Empty;
        }
    }

    private void AddActionItem(string newActionEntry)
    {
        if (!string.IsNullOrWhiteSpace(newActionEntry))
        {
            actionItems.Items.Add(new RetroItem { Text = newActionEntry, Author = "Anonymous" });
            newActionEntry = string.Empty;
        }
    }

    private void RemoveRetro(RemoveRetroPayload retroToRemove)
    {
        Console.WriteLine("Delete method invoked");
        retroToRemove.TargetList.RemoveAll(item => item.Id == retroToRemove.ItemId);
    }
}
